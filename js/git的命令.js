/**
 * 1. git  init  初始化项目仓库 会生成一个.git的隐藏文件
 *                表示当前的项目就被GIT进行了管理
 * 
 * 2. git  status  
 *        作用：用来查看文件的状态
 *          文件为红色   此文件在工作区
 *          文件为绿色   此文件在暂存区
 *          没有文件     说明文件被提交到了仓储区
 * 3. git add 要提交到暂存区的文件名  
 *      作用:将工作区的文件提交到暂存区
 *      git add index.html  将index.html文件提交到暂存区
 *      git add .           将工作区中的所有的修改或新增的文件提交到暂存区
 *      git add --all
 * 
 * 
 * 4. git commit -m 操作记录  将文件由暂存区提交到仓储区
 *      git commit -m '01-新建了一个主页面'
 * 
 * 5. git log  
 *      作用：查看提交日志 查看不到版本回退的操作日志
 *      git reflog  查看所有的操作日志 包括版本回退的操作
 * 
 * 6. git reset --hard 版本号 
 *      作用: 将当前的项目回退到之前的某个版本
 * 
 * 7. git branch 分支名称
 *      作用：创建侧分支 
 * 
 * 8. git checkout 分支名称
 *      作用：切换分支 
 * 
 * 9. git merge  侧分支名称
 *      作用：将侧分支合并到主分支 
 * 
 * 10. git branch 
 *      作用：查看分支 
 * 
 * 11. git branch -d 分支名称
 *       作用：删除分支 是在主分支上删除侧分支 
 * 
 * 12. git checkout -b 分支名称
 *      作用：创建并切换到侧分支 
 * 
 * 13. 将本地项目上传到远程仓库  
 *      1. 先由你的项目经理在github创建一个项目仓库 进行项目的初始化
 *      2. 各开发人员 使用git clone  远程仓库地址  下载到本地 进行各自己模块的开发
 *      3. 在每个人开发完毕之后，要将本地的项目上传到远程仓库
 *      4. 在上传之前一定要注意要先git pull 将远程仓库的代码先拉取到本地，和本地项目进行一个匹配
 *      5. 再使用git push 远程仓库地址 master 上传到远程仓库  
 *      
 *    也就是说，即使有冲突，也要在本地解决冲突，不要在远程仓库解决冲突
 *     
 */
console.log('123');